import path from 'path';

const findFilesByName = (root, str) => {
  const iter = (n, p, acc) => {
    if (n.type === 'file' && n.name.includes(str)) {
      return [...acc, path.join(...p, n.name)];
    }
    if (!n.children) {
      return acc;
    }
    return n.children.reduce((cAcc, nn) => iter(nn, [...p, n.name], cAcc), acc);
  };
  return iter(root, [], []);
};
export default findFilesByName;

//*
const tree = mkdir('/', [
  mkdir('etc', [
    mkdir('apache'),
    mkdir('nginx', [
      mkfile('nginx.conf', { size: 800 }),
    ]),
    mkdir('consul', [
      mkfile('config.json', { size: 1200 }),
      mkfile('data', { size: 8200 }),
      mkfile('raft', { size: 80 }),
    ]),
  ]),
  mkfile('hosts', { size: 3500 }),
  mkfile('resolve', { size: 1000 }),
]);

findFilesByName(tree, 'co');
// => ['/etc/nginx/nginx.conf', '/etc/consul/config.json']
*//
