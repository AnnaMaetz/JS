const singleTagsList = new Set(['hr', 'img', 'br']);

export const render = (ast) => {
  const buildAttrString = attrs => Object.keys(attrs).map(key => ` ${key}="${attrs[key]}"`).join('');
  const isSingleTag = name => singleTagsList.has(name) ? '' : `</${name}>`;
  return `<${ast.name}${buildAttrString(ast.attributes)}>${ast.body}${ast.children.map(render).join('')}${isSingleTag(ast.name)}`;
};

export const parse = (dsl) => {
  const propertyAction = [
    {
      name: 'body',
      check: arg => typeof arg === 'string',
    },
    {
      name: 'children',
      check: arg => arg instanceof Array,
    },
    {
      name: 'attributes',
      check: arg => arg instanceof Object,
    },
  ];
  const getPropertyAction = arg => propertyAction.find(({ check }) => check(arg));

  const [first, ...rest] = dsl;
  const root = {
    name: first,
    attributes: {},
    body: '',
    children: [],
  };
  const tag = rest.reduce((acc, arg) => {
    const { name } = getPropertyAction(arg);
    return { ...acc, [name]: arg };
  }, root);
  return {
    name: tag.name,
    attributes: tag.attributes,
    body: tag.body,
    children: tag.children.map(parse),
  };
};

//*
const data = ['html', [
  ['meta', { id: 'uniq-key' }, [
    ['title', 'hello, hexlet!'],
  ]],
  ['body', [
    ['br'],
  ]],
]];

const ast = parse(data);

{ name: 'html', attributes: {}, body: '', children: [
  { name: 'meta', attributes: { id: 'uniq-key' }, body: '', children: [
    { name: 'title', attributes: {}, body: 'hello, hexlet!', children: [] },
  ]},
  { name: 'body', attributes: {}, body: '', children: [
    { name: 'br', attributes: {}, body: '', children: [] },
  ]},
]}
*//
