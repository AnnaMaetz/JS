//generic.js
import { cons, car, cdr, toString as pairToString } from 'hexlet-pairs'; // eslint-disable-line
import {
  l, cons as consList, isEmpty, head, tail,
} from 'hexlet-pairs-data';
import { attach, typeTag, contents } from '@hexlet/tagged-types';

let methods = l();

export const getMethod = (obj, methodName) => {
  // BEGIN (write your solution here)
  const getMethodIter = (m) => {
    if (isEmpty(m)) {
      return null;
    }
    if (typeTag(head(m)) === typeTag(obj) &&
    car(contents(head(m))) === methodName) {
      return cdr(contents(head(m)));
    }
    return getMethodIter(tail(m));
  }
  return getMethodIter(methods);
  // END
};

export const definer = type => (methodName, f) => {
  methods = consList(attach(type, cons(methodName, f)), methods);
};

//SimpleCard.js
import { cons, car, cdr, toString as pairToString } from 'hexlet-pairs'; // eslint-disable-line
import { attach } from '@hexlet/tagged-types';
import { definer } from './generic';

// BEGIN (write your solution here)
const defmethod = definer('SimpleCard');

const make = (name, damagePoints) => attach('SimpleCard', cons(name, damagePoints));

export default make;

defmethod('getName', self => car(self));

defmethod('damage', self => cdr(self));

// END

//PercentCard.js
import { cons, car, cdr, toString as pairToString } from 'hexlet-pairs'; // eslint-disable-line
import { attach } from '@hexlet/tagged-types';
import { definer } from './generic';

const defmethod = definer('PercentCard');

const make = (name, percent) => attach('PercentCard', cons(name, percent));

export default make;

defmethod('getName', self => car(self));

defmethod('damage', (self, health) => Math.round(health * (cdr(self) / 100)));

//card.js
import { contents } from '@hexlet/tagged-types';
import { getMethod } from './generic';

export const getName = self => getMethod(self, 'getName')(contents(self));

// BEGIN (write your solution here)
export const damage = (self, health) => getMethod(self, 'damage')(contents(self), health);
// END

