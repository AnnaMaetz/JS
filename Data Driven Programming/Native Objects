//solution.js
import { cons as consList, l, random, head, reverse, toString as listToString } from 'hexlet-pairs-data'; // eslint-disable-line

const run = (player1, player2, cards, customRandom) => {
  // BEGIN (write your solution here)
  const iter = (health1, name1, health2, name2, order, log) => {
    let logItem;
    if (health1 <= 0) {
      logItem = {
        health1: head(log).health1,
        health2: head(log).health2,
        message: `${name1} was killed`,
      };
      return consList(logItem, log);
    }
    const card = customRandom(cards);
    const cardName = card.name;
    const damage = card.damage(health2);
    const newHealth = health2 - damage;
    const message = `Player '${name1}' applied '${cardName}' vs '${name2}' and caused damage '${damage}'`;
    if (order === 1) {
      logItem = {
        health1,
        health2: newHealth,
        message,
      };
    } else {
      logItem = {
        health1: newHealth,
        health2: health1,
        message,
      };
    }
    const newLog = consList(logItem, log);
    return iter(newHealth, name2, health1, name1, order === 1 ? 2 : 1, newLog);
  };
  // END

  const startHealth = 10;
  const logItem = {
    health1: startHealth,
    health2: startHealth,
    message: 'Start game!',
  };
  return reverse(iter(startHealth, player1, startHealth, player2, 1, l(logItem)));
};

export default (cards, customRandom = random) => (
  (name1, name2) => run(name1, name2, cards, customRandom)
);
//simpleCard.js
// BEGIN (write your solution here)
const make = (name, damagePoints) => ({
  name,
  damage: () => damagePoints,
});

export default make;

// END
//percentCard.js
const make = (name, percent) => ({
  name,
  damage: health => Math.round(health * (percent / 100)),
});

export default make;
// test.js
import simpleCard from '../simpleCard';
import percentCard from '../percentCard';
import make from '../solution';

describe('CardGame', () => {
  it('#flow 1', () => {
    const cards = l(simpleCard('Королевский хлыст шанса', 5));
    const game = make(cards);
    const log = game('John', 'Ada');

    expect(length(log)).toBe(5);

    const step1 = get(0, log);
    expect(step1.health1).toBe(10);
    expect(step1.health2).toBe(10);

    const step2 = get(1, log);
    expect(step2.health1).toBe(10);
    expect(step2.health2).toBe(5);

    const step3 = get(2, log);
    expect(step3.health1).toBe(5);
    expect(step3.health2).toBe(5);

    const step4 = get(3, log);
    expect(step4.health1).toBe(5);
    expect(step4.health2).toBe(0);

    const step5 = get(4, log);
    expect(step5.health1).toBe(5);
    expect(step5.health2).toBe(0);
  });
