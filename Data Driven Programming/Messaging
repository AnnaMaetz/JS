// eslint-disable
import { cons, car } from 'hexlet-pairs';
import {
  cons as consList, l, random, head, reverse,
} from 'hexlet-pairs-data'; // eslint-enable


const run = (player1, player2, cards, customRandom) => {
  const iter = (health1, name1, health2, name2, order, log) => {
    if (health1 <= 0) {
      return consList(cons(car(head(log)), `${name1} killed`), log);
    }
    const card = customRandom(cards);
    // BEGIN (write your solution here)
    const cardName = card('getName');
    const damage = card('damage', health2);
    // END
    const newHealth = health2 - damage;

    const message = `Player '${name1}' applied '${cardName}' vs '${name2}' and caused damage '${damage}'`;
    let stats;
    if (order === 1) {
      stats = cons(cons(health1, newHealth), message);
    } else if (order === 2) {
      stats = cons(cons(newHealth, health1), message);
    }
    const newLog = consList(stats, log);
    return iter(newHealth, name2, health1, name1, order === 1 ? 2 : 1, newLog);
  };

  const startHealth = 10;
  const logItem = cons(cons(startHealth, startHealth), 'Start game!');
  return reverse(iter(startHealth, player1, startHealth, player2, 1, l(logItem)));
};

export default (cards, customRandom = random) => (name1, name2) => (
  run(name1, name2, cards, customRandom)
);

//simpleCard.js
// BEGIN (write your solution here)
const make = (name, damagePoints) => (message) => {
  switch (message) {
    case 'getName':
      return name;
    case 'damage':
      return damagePoints;
    default:
      return 'undefined method';
  }
};

export default make;
// END

//percentCard.js
const make = (name, percent) => (message, health) => {
  switch (message) {
    case 'getName':
      return name;
    case 'damage':
      return Math.round(health * (percent / 100));
    default:
      return 'undefined method';
  }
};

export default make;
