class Enumerable {
  constructor(collection, operations) {
    this.collection = collection;
    this.operations = operations || [];
  }

  build(fn) {
    return new Enumerable(this.collection.slice(), this.operations.concat(fn));
  }

  // BEGIN (write your solution here)
  where(...params) {
    let c = this;
    const funcOrObj = (param) => {
      if (typeof param === 'function') {
        c = c.build(coll => coll.filter(param));
      } else {
        const keysArr = Object.keys(param);
        const forEveryKeyParam = collElem => keysArr.every(key => collElem[key] === param[key]);
        c = c.build(coll => coll.filter(forEveryKeyParam));
      }
    };
    params.forEach(funcOrObj);
    return c;
  }
  // END

//*
  const cars = [
  { brand: 'bmw', model: 'm5', year: 2014 },
  { brand: 'bmw', model: 'm4', year: 2013 },
  { brand: 'kia', model: 'sorento', year: 2014 },
  { brand: 'kia', model: 'rio', year: 2010 },
  { brand: 'kia', model: 'sportage', year: 2012 },
];
coll = new Enumerable(cars);

const result = coll
  .where(car => car.brand === 'kia')
  .where(car => car.year > 2011);

result.toArray();

// [
//   { brand: 'kia', model: 'sorento', year: 2014 },
//   { brand: 'kia', model: 'sportage', year: 2012 },
// ]

const result2 = coll.where({ brand: 'bmw' });
result2.toArray();
// [
//   { brand: 'bmw', model: 'm5', year: 2014 },
//   { brand: 'bmw', model: 'm4', year: 2013 },
// ]

const result3 = coll.where({ brand: 'kia', model: 'sorento' });
result3.toArray();
// [
//   { brand: 'kia', model: 'sorento', year: 2014 },
// ]

const result3 = coll.where({ brand: 'kia' }, {  model: 'sorento' });
result3.toArray();
// [
//   { brand: 'kia', model: 'sorento', year: 2014 },
// ]

const result4 = coll.where({ brand: 'kia' }, car => car.year < 2013);
result4.toArray();
// [
//   { brand: 'kia', model: 'rio', year: 2010 },
//   { brand: 'kia', model: 'sportage', year: 2012 },
// ]
*//
  getProcessedCollection() {
    if (!this.memo) {
      this.memo = this.operations.reduce((acc, func) => func(acc), this.collection);
    }

    return this.memo;
  }

  get length() {
    return this.getProcessedCollection().length;
  }

  toArray() {
    return this.getProcessedCollection().slice();
  }
}

export default Enumerable;
