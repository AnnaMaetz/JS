import { l, isEmpty, head, tail, concat, toString as listToString } from 'hexlet-pairs-data'; // eslint-disable-line
import { is, toString as htmlToString, hasChildren, children, reduce, filter, map } from 'hexlet-html-tags'; // eslint-disable-line

const select = (query, html) => {
  const firstTag = (tag, acc) => {
    let newAcc = acc;
    if (is(head(query), tag)) {
      if (isEmpty(tail(query))) {
        newAcc = concat(l(tag), newAcc);
      } else {
          if (hasChildren(tag)) {
            newAcc = concat(children(tag), newAcc);
          }
      }
    }
    if (hasChildren(tag)) {
      newAcc = concat(reduce(firstTag, l(), children(tag)), newAcc);
    }
    return newAcc;
  };

  const selectIter = (q, h) => {
    const nextTag = (tag ,acc) => {
      let newAcc = acc;
      if (is(head(q), tag)) {
        if (isEmpty(tail(q))) {
          newAcc = concat(l(tag), newAcc);
        } else {
            if (hasChildren(tag)) {
              newAcc = concat(children(tag), newAcc);
            }
        }
      }
      return newAcc;
    };

    const newH = reduce(nextTag, l(), h);
    console.log(htmlToString(newH));
    if (isEmpty(tail(q))) {
      return newH;
    }
    return selectIter(tail(q), newH);
  };

  const newHtml = reduce(firstTag, l(), html);
  if (isEmpty(tail(query))) {
      return newHtml;
  }

  return selectIter(tail(query), newHtml);
};
export default select;

//*
<h1>scheme</h1>
<p>is a lisp</p>
<p>
  <ul>
    <li>item 2</li>
    <li>item 1</li>
  </ul>
</p>
<ol>
  <li>item 2</li>
  <li>item 1</li>
</ol>
<p>is a functional language</p>
<ul>
  <li>item</li>
</ul>
<div>
  <p>another text</p>
</div>
<div>
  <div>
    <p>
      <span>text</span>
    </p>
  </div>
</div>
<div>
  <a>
    <div>
      <p>
        <span>text</span>
      </p>
    </div>
  </a>
</div>
<h1>prolog</h1>
<p>is about logic</p>


const dom1 = make();
const dom2 = append(dom1, node('h1', 'scheme'));
const dom3 = append(dom2, node('p', 'is a lisp'));
const children1 = l(node('li', 'item 1'), node('li', 'item 2'));
const dom4 = append(dom3, node('p', l(node('ul', children1))));
const children2 = l(node('li', 'item 1'), node('li', 'item 2'));
const dom5 = append(dom4, node('ol', children2));
const dom6 = append(dom5, node('p', 'is a functional language'));
const children3 = l(node('li', 'item'));
const dom7 = append(dom6, node('ul', children3));
const dom8 = append(dom7, node('div', l(node('p', 'another text'))));
const dom9 = append(dom8, node('div', l(node('div', l(node('p', l(node('span', 'text'))))))));
const dom10 = append(dom9, node('div', l(node('a', l(node('div', l(node('p', l(node('span', 'text'))))))))));
const dom11 = append(dom10, node('h1', 'prolog'));
dom = append(dom11, node('p', 'is about logic'));


select(l('p', 'ul', 'li'), dom);
// <li>item 1</li><li>item 2</li>

select(l('div', 'div', 'p'), dom);
// <p><span>text</span></p>

select(l('div', 'p'), dom);
// <p>another text</p><p><span>text</span></p><p><span>text</span></p>

select(l('div'), dom));
// <div><a><div><p><span>text</span></p></div></a></div><div><p><span>text</span></p></div><div><div><p><span>text</span></p></div></div><div><p><span>text</span></p></div><div><p>another text</p></div>
*//
